@page "/adults"
@using global::Models

@using System.Reflection.Metadata
@using System.Text.Json
<h3>Adults</h3>

<label>Search by First Name: &nbsp;</label>
<input type="text" placeholder="First Name" @bind-value="searchWord"/>

<button class="btn btn-primary" @onclick="Search">Search</button>
<br>
<button class="btn btn-primary" @onclick="loadEverything">Load Everyone</button>
<button class="btn btn-primary" @onclick="FetchAdultsAsync">Fetch</button>

@if (_adults == null) {
    <p>
        <em>Loading...</em>
        
    </p>
} else {
    
    <table class="table">
        <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>ID</th>
            <th>Hair Color</th>
            <th>Eye Color</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
            <th>Job Title</th>
            <th>Salary</th>
            
            
        </tr>
        </thead>
        <tbody>
        @foreach (var adultList in _adults) {
            <tr>
                <td>@adultList.firstName</td>
                <td>@adultList.lastName</td>
                <td>@adultList.id</td>
                <td>@adultList.hairColor</td>
                <td>@adultList.eyeColor</td>
                <td>@adultList.age</td>
                <td>@adultList.weight</td>
                <td>@adultList.height</td>
                <td>@adultList.sex</td>
                <td>@adultList.jobTitle.jobTitle</td>
                <td>@adultList.jobTitle.salary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    
    //De 2 nederstående funktioner, køres når siden åbnes
    Task SomeStartupTask()
    {
    // Do some task based work
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchAdultsAsync();
        await SomeStartupTask();
    }
    
    
    public string searchWord = "";
    public IList<Adult> _adults;
    private int resultAmount = 0;

    public async void Search()
    {
        if (searchWord == "")
        {
            
        } else {
        resultAmount = 0;
            _adults =  FetchAdultsAsync().Result;

        IList < Adult > resultList = new List<Adult>();

        Console.WriteLine("Pre loop");
        for (int i = 0; i < FetchAdultsAsync().Result.Count; i++)
        {
            Console.WriteLine("In loop");
            if (_adults[i].firstName.Contains(searchWord))
            {
                Console.WriteLine("In if");
                resultList.Add(_adults[i]);
                resultAmount++;
            }
        }

            
        _adults = resultList;
        Console.Write("Search done");
    }
    }

    

    public async void loadEverything()
    {
        try
        {
            await FetchAdultsAsync();
    

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    public async Task<List<Adult>> FetchAdultsAsync()
    {
        HttpClient client = new HttpClient();
        HttpResponseMessage responseMessage = await client.GetAsync("https://localhost:5005/Adult");

        if (!responseMessage.IsSuccessStatusCode)
        {
            throw new Exception($@"Error: {responseMessage.StatusCode}, {responseMessage.ReasonPhrase}");
        }

        string result = await responseMessage.Content.ReadAsStringAsync();

        List<Adult> adults2 = JsonSerializer.Deserialize<List < Adult >>  (result, new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        });

        
        _adults = adults2;
        Console.WriteLine("Done fetching");
        return adults2;
    } 
}